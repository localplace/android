Functional Reactive Concepts

Functional Programming Concepts :- making it predictable and thread safe 

a) Pure Functions  :- with no sideeffects 

1) with same set of parameters will get same result every time example SideEffectIllustration.java 

a)No sideeffect caused by Class or Instance state

b)No sideeffect effects caused by I/O devices

c) No time related side effects.

Functions as first class citizens

a) FirstClassCitizenParameterIllustration.java and FirstClassCitizenVariableIllustration.java

1) Variables may contain functions 
2) funcation can be passed as parameters 


High Order functions  :- functions that return other functions 

functions that take functions and return a composite functions.

HighOrderFunctionIllustration.java

--------------------------------------------------


Reactive Programming Concepts

a) Reactive Manifesto :- Event Driven, works well with facilitates concurrency and decouple certain modules from each other , maintainable and extensible.

Event driven :- Observer Pattern 

a) Observable 

b) observers, these subscribe themenselves to the observables. then any changes to the obseravable are sent to the observers as notifications.

Obseravable<T> a particular type of events, Observer will observe that event. 

Event of type T, then that notification is sent to each observer.


for example

Observable<User> returns a list of users. Observer will filter out users that is not an admin. Rxjava has lot of schedulers, that handles the threading for us.

sends to 

grouping of users can be done serialized 

sends to
map orm user to json 	


b) Make applications scalable.

Scalable, if there is more load, then we need to create new instances of our applications

as they are done in parallel, so it becomes a faster way in executing


c) applications resilient to changes in load

if there are failures, services goes down, we want apps to ahndle gracefully.

Graceful Error Handling.
if a failing system had impact on other elements of our system.  

d)Responsive
Maximum use of available resources.

Observable Data Models :- MVVM pattern , when data modesls are updated , then view models are updated , ui is refreshed.

Users generate streams of events by their actions 


-----------------------------------------------------


Module 2 
Observable Creations, Composition and Filtering


Observable Creation  , how to create observables, lifecycle of observable, and basics of how RXJAVA 

Composition :- 

Filtering  :- How to filter 


Observer Creation Lifecycle Theort

Observer -->  Observer Interface -> methods onNext(T), onComplete(T), onError(Throwable T);

Subscription -> Subscription Interface . -> single unsubscribe to detach the observer from the observable to which its subscribed


Two Types of Observables supported by RxJava

a) Non blocking Observables -> async execution, unsubscribe at any point in the event stream.

b) Blocking Observable :- Events are synchronous , no ability to unsubscribe. 

RxJava will give us the ability to execute on different threads using Scheduleers.
Schedulers have many prepackaged options, these include
compultaion :-  number of threads available equivalent number of process cores within computer.

currentThread :- Indicated that current work is finished , your event code should run on current thread

immediate :- contrast to current thread, 

io :- long running i/o network communication, thread pool waiting i/o threads

newthread :- new thread created for each unit of work

executor :- executor interface, to scheduler interface 


Observables :- RxJava is Single Thread by default.
subscribeOn(Scheduler); if subscribeOn not mentioned, then the current thread will be used to drive the subscribe on.

of observeOn is not mentioned it will use the scheduler from the subscribeOn 

Observable Creation

a) Observable.from ->

adding compile 'io.reactivex:rxjava:1.1.6'  to the classPath, fixes 

-----------------------------------------------------------------

How to create a Observable

Lifecycle of Observable

How Rxjava handles Async Execution


-------------------------------------------------------------------

Composition

How different Observable are combined together.

-------------------------------------------------------------------

Filtering

How to include filter operations in our composited operation inorder to remove unwanted data.

--------------------------------------------------------------------


Obervable Lifecycle

Observable 1          

Observable 2 


Observer1 (subscribe to Observable 1,Observable 2)

Observer2 (subscribe to Observable 1) 

Observer3 (subscribe to Observable 2) 


Once event is fired 

Observer has 3 method onNext, onCompleted, onError

Subsribe -> unsubsribe method also presnt for observer.

------------------------------------------------------------------------


There are two types of Observables

1) Non Blocking Observable  

(Async Execution), event can be handled by a different thread. Unsubscribe at any point in the evet stream.

2) Blocking Observable 

All onNext calls will be Synchronous  
no ability to unsubscribe in the middle of event stream.

-----------------------------------------------------------------------


RxJava will let allow you to specify the thread you want your code to execute on with the help of schedulers.

Schedulers - Many prepackaged options

computation() will have number of threads available based on number of processing cores within scheduler.

currentThread :- scheduler tell to execute the eventcode on currentThread 

immediate() :- does not allow current work to finish, immediately executes eventcode. 

io() :- network operations, database operations 

newthread() :- newthread to be created for each unit of work.

executor(Executor)/ executor(ScheduledExecutor) :-  DONT UNDERSTAND 

---------------------------------------------------------------------

How does Observables leverage Schedulers.  

All Rxjava is Single Thread by default, so it will execute in the same thread where the subsribe method was called.

Observable

a) subscribeOn(Scheduler) , that Scheduler passed on determing the thread that the code will run on when subscribe method is called.

b) observeOn , Scheduler when onNext, onCompete, onError. 

-----------------------------------------------------------------------


Observable Creation

a) Observable.from :- , object, iterable, array, future interface, we can also pass a scheduler if we want for nonblocking 

b) BlockingObservable.from(Observable o) :- will wrap the Observable with a blocking observable and return it. 

public class Demo1 {

    public static void main(String [] args) {
        Observable<Integer> observable = null;

        // We can pass an Iterable which is a list
        observable = Observable.fromArray(new Integer[] {1,2,3});
        observable.subscribe((i) -> {
           System.out.println(i);
        });

        observable = Observable.fromIterable(getInteger());
        observable.subscribe((i) -> {
            System.out.println(i);
        });

        observable.observeOn(Schedulers.newThread()).subscribe((list) -> {
                System.out.println("ok1"+Thread.currentThread());
                System.out.println(list);
            });
    }

    private static List<Integer> getInteger() {
        List<Integer> abs  = new ArrayList<Integer>();
        abs.add(10);
        abs.add(20);
        abs.add(30);
        return abs;
    }
}


-------------------------------------------------------------------

Composition (Got Stuck, dont know how to create Observables in parallel)









